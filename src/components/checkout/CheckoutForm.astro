---
import CheckoutProductsInput from "@/components/checkout/CheckoutProductsInput";
import Button from "@/components/ui/Button.astro";
import { actions, isInputError } from "astro:actions";

type Sucursal = {
  id: number;
  name: string;
  address: string;
};

const sucursales: Sucursal[] = [
  {
    id: 547,
    name: "Formula 1",
    address: "Av. La Postrería 77, Buenos Aires, Argentina",
  },
  {
    id: 44,
    name: "Serena",
    address:
      "Pueblo Serena, Carretera Nacional #500 Local F. Colonia Valle Alto, Monterrey, N.L.",
  },
];

const result = Astro.getActionResult(actions.orders.create);
const inputErrors = isInputError(result?.error) ? result.error.fields : {};
if (result && !result.error) {
  return Astro.redirect(result.data.url);
}
---

<form class="flex flex-col" method="POST" action={actions.orders.create}>
  <CheckoutProductsInput client:only />
  <label for="nombre" class="mb-4"
    >Nombre
    {
      inputErrors.nombre && (
        <p class="inline -translate-y-1 rounded-sm border border-red-500 px-2 py-[2px] text-[8px] text-red-500">
          {inputErrors.nombre}
        </p>
      )
    }
    <input
      type="text"
      name="nombre"
      id="nombre"
      aria-describedby="error-nombre"
      class="mt-1 min-h-5 w-full rounded-sm border border-opacity-25 px-3 pb-[10px] pt-3 leading-none text-dark"
    />
  </label>
  <label for="tel" class="mb-4"
    >Teléfono
    {
      inputErrors.tel && (
        <p
          id="error-tel"
          class="inline -translate-y-1 rounded-sm border border-red-500 px-2 py-[2px] text-[8px] text-red-500"
        >
          {inputErrors.tel.join(",")}
        </p>
      )
    }
    <input
      type="tel"
      name="tel"
      id="tel"
      aria-describedby="error-tel"
      class="mt-1 min-h-5 w-full rounded-sm border border-opacity-25 px-3 pb-[10px] pt-3 leading-none text-dark"
    />
  </label>
  <label for="sucursal" class="mb-4"
    >Sucursal
    {
      inputErrors.sucursal && (
        <p
          id="error-sucursal"
          class="inline -translate-y-1 rounded-sm border border-red-500 px-2 py-[2px] text-[8px] text-red-500"
        >
          {inputErrors.sucursal.join(",")}
        </p>
      )
    }
    <select
      name="sucursal"
      id="sucursal"
      aria-describedby="error-sucursal"
      class="mt-1 min-h-5 w-full rounded-sm border border-opacity-25 px-3 pb-[10px] pt-3 leading-none text-dark"
    >
      <option selected value="">Sucursal de Entrega</option>
      {
        sucursales.map((sucursal) => (
          <option value={sucursal.id} class="min-h-5 capitalize">
            {sucursal.name}
          </option>
        ))
      }
    </select>
  </label>
  <label for="fecha" class="mb-4">
    Fecha
    {
      inputErrors.fecha && (
        <p
          id="error-fecha"
          class="inline -translate-y-1 rounded-sm border border-red-500 px-2 py-[2px] text-[8px] text-red-500"
        >
          {inputErrors.fecha.join(",")}
        </p>
      )
    }
    <input
      type="datetime-local"
      name="fecha"
      id="fecha"
      aria-describedby="error-fecha"
      class="mt-1 min-h-5 w-full rounded-sm border border-opacity-25 px-3 pb-[10px] pt-3 leading-none text-dark"
      min={new Date().toISOString().slice(0, 16)}
    />
  </label>
  <Button type="submit">Proceder Al Pago</Button>
</form>

<!--   <script>
    import { actions } from "astro:actions";
    import { navigate } from "astro:transitions/client";

    const form = document.querySelector("form") as HTMLFormElement;
    form?.addEventListener("submit", async (event) => {
      event.preventDefault();
      const formData = new FormData(form);
      const { data, error } = await actions.orders.create(formData);
      if (error) alert("Error al crear orden: " + error);
      if (data) {
        console.log(data.message);
        if (data.url) navigate(data.url);
      }
    });
  </script> -->
